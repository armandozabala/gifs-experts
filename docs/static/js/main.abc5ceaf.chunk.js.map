{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","cats","type","value","onChange","target","getGifs","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","loading","state","setState","useEffect","then","imgs","useFetchGifs","GifExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"iMAuCeA,EAnCK,SAAC,GAAqB,IAApBC,EAAmB,EAAnBA,cAAmB,EAEDC,mBAAS,IAFR,mBAE9BC,EAF8B,KAElBC,EAFkB,KAoBrC,OACI,sBAAMC,SAZW,SAACC,GAChBA,EAAEC,iBAECJ,EAAWK,OAAOC,OAAS,IAC5BR,GAAc,SAAAS,GAAI,OAAKP,GAAL,mBAAoBO,OACtCN,EAAc,MAOlB,SACG,uBACKO,KAAK,OACLC,MAAQT,EACRU,SApBc,SAACP,GACtBF,EAAcE,EAAEQ,OAAOF,a,+BCTnBG,EAAO,uCAAG,WAAQC,GAAR,uBAAAC,EAAA,6DAEbC,EAFa,iDAEmCC,UAAUH,GAF7C,+DAGAI,MAAMF,GAHN,cAGbG,EAHa,gBAIIA,EAAKC,OAJT,uBAIXC,EAJW,EAIXA,KAEHC,EAAOD,EAAKE,KAAI,SAAAC,GAAQ,IAAD,EACzB,MAAO,CACFC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QAVvB,kBAcbM,GAda,4CAAH,sDCYLO,EAXK,SAAC,GAAwB,EAArBJ,GAAsB,IAAlBC,EAAiB,EAAjBA,MAAOV,EAAU,EAAVA,IAG/B,OACI,sBAAKc,UAAU,yCAAf,UACI,qBAAKC,IAAKf,EAAKgB,IAAKN,IACpB,4BAAIA,QC0BDO,EA7BC,SAAC,GAAkB,IAAhBnB,EAAe,EAAfA,SAAe,ECFN,SAAEA,GAAe,IAAD,EAGdd,mBAAS,CAC/BqB,KAAM,GACNa,SAAS,IAL2B,mBAGjCC,EAHiC,KAG1BC,EAH0B,KAiBxC,OATAC,qBAAU,WAENxB,EAAQC,GAAUwB,MAAM,SAAAC,GAAI,OAAIH,EAAS,CACnCf,KAAMkB,EACNL,SAAS,SAGhB,CAACpB,IAEGqB,EDZmBK,CAAa1B,GAA/BO,EAHsB,EAGtBA,KAAMa,EAHgB,EAGhBA,QAGd,OACI,qCACA,mCAAMpB,EAAN,OAEEoB,GAAW,mBAAGJ,UAAU,mCAAb,sBAGb,qBAAKA,UAAU,YAAf,SAGYT,EAAKE,KAAI,SAAAC,GAAG,OACP,cAAC,EAAD,eAEUA,GADCA,EAAIC,aESzBgB,EA5BM,WAAO,IAAD,EAGazC,mBAAS,CAAC,cAHvB,mBAGhB0C,EAHgB,KAGJ3C,EAHI,KAMvB,OACI,gCACI,gDACA,cAAC,EAAD,CAAaA,cAAgBA,IAC7B,uBAID,6BAEQ2C,EAAWnB,KAAK,SAAAT,GAAQ,OAClB,cAAC,EAAD,CACGA,SAAUA,GACLA,Y,MCjBjC6B,IAASC,OACL,cAAC,EAAD,IACFC,SAASC,eAAe,W","file":"static/js/main.abc5ceaf.chunk.js","sourcesContent":["import React, { useState } from 'react'\nimport PropTypes from 'prop-types';\n\n\nconst AddCategory = ({setCategories}) => {\n    \n    const [inputValue, setInputValue] = useState('');\n    \n\n    const handleInputChange = (e) => {\n         setInputValue(e.target.value);\n    }\n\n    const handleSubmit = (e) => {\n          e.preventDefault();\n\n          if(inputValue.trim().length > 2){\n            setCategories(cats => [inputValue, ...cats]);\n            setInputValue('');\n          }\n\n          \n    }\n\n    return (\n        <form onSubmit={handleSubmit}> \n           <input \n                type=\"text\"\n                value={ inputValue }\n                onChange = { handleInputChange }\n           />\n        </form>\n    )\n}\n\nAddCategory.propTypes = {\n    setCategories: PropTypes.func.isRequired\n}\n\nexport default AddCategory\n","\nexport const getGifs = async ( category ) => {\n\n    const url = `https://api.giphy.com/v1/gifs/search?q=${encodeURI(category)}&limit=10&api_key=nzhKknciifYEHUsf7yoBhfVByKDClzEX`;\n    const resp = await fetch(url);\n    const { data } = await resp.json();\n\n   const gifs = data.map(img => {\n       return {\n            id: img.id,\n            title: img.title,\n            url: img.images?.downsized_medium.url\n       }\n   })\n\n   return gifs;\n\n\n}\n","import React from 'react'\n\nconst GifGridItem = ( { id, title, url} ) => {\n    \n    \n    return (\n        <div className=\"card animate__animated animate__fadeIn\">\n            <img src={url} alt={title}/>\n            <p>{title}</p> \n        </div>\n    )\n}\n\nexport default GifGridItem\n","import React, { useEffect, useState } from 'react'\nimport { getGifs } from '../helpers/getGifs';\nimport { useFetchGifs } from '../hooks/useFetchGifs';\nimport GifGridItem from './GifGridItem';\n\nconst GifGrid = ({ category }) => {\n    \n\n    const { data, loading } = useFetchGifs(category);\n\n\n    return (\n        <>\n        <h3> {category} </h3>\n\n        { loading && <p className=\"animate__animated animate__flash\">Loading </p>}\n\n     \n        <div className=\"card-grid\">\n          \n                {\n                    data.map(img => (\n                         <GifGridItem \n                               key={img.id} \n                               {...img}\n                         />\n                    ))\n                }\n         \n            </div>\n       </>\n    )\n}\n\nexport default GifGrid\n","import { useEffect, useState } from \"react\"\nimport { getGifs } from \"../helpers/getGifs\"\n\nexport const useFetchGifs = ( category ) => {\n \n    \n    const [state, setState] = useState({\n        data: [],\n        loading: true\n    })\n\n    useEffect(() => {\n        \n        getGifs(category).then( imgs => setState({\n              data: imgs,\n              loading: false\n        }))\n\n    }, [category])\n\n    return state;\n}\n\n","import React, { useState } from 'react'\nimport AddCategory from './components/AddCategory'\nimport GifGrid from './components/GifGrid'\n\nconst GifExpertApp = () => {\n\n\n    const [categories, setCategories] = useState(['One punch'])\n\n\n    return (\n        <div>\n            <h2>Gif Expert App</h2>\n            <AddCategory setCategories={ setCategories } />\n            <hr/>\n\n            \n\n           <ol>\n               {\n                   categories.map( category => (\n                         <GifGrid \n                            category={category}\n                            key={category}    \n                        />\n                   ))\n               }\n           </ol>\n        </div>\n    )\n}\n\nexport default GifExpertApp\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport GifExpertApp from './GifExpertApp';\n\nimport './index.css';\n\nReactDOM.render(\n    <GifExpertApp />,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}